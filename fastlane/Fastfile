# Global variables to simplify the individual adjustment
PROJECT_NAME = "MyAwesomeProject"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"
PODFILE = "ios/Podfile"
PODFILE_LOCK = "ios/Podfile.lock"
BUILD_TYPE = "release" # development | release

opt_out_usage

platform :ios do
  before_all do
    ensure_git_status_clean
  end

  private_lane :commitAndPush do | options |
    commit_version_bump(
      xcodeproj: XCODE_PROJECT,
      include: [PODFILE_LOCK],
    )

    puts "****************************************"
    puts "#{options[:branch_name]}"
    puts "****************************************"
    push_to_git_remote(
      local_branch: options[:branch_name],
    )
  end

  private_lane :certificates do | options |
    running_on_ci = options[:running_on_ci]
    match_type = options[:match_type]

    if running_on_ci
      create_keychain(
        name: ENV["CI_KEYCHAIN_NAME"],
        password: ENV["CI_KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: match_type,
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    else
      match(
        type: match_type,
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    end

  end

  private_lane :build do | options |
    certificates(options)

    cocoapods(
      repo_update: true,
      podfile: PODFILE,
    )

    increment_build_number(
      xcodeproj: XCODE_PROJECT,
      build_number: 15,
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: options[:configuration_name],
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_options: {
        method: options[:export_options_method],
        provisioningProfiles: {
          options[:app_identifier] => ENV["sigh_#{options[:app_identifier]}_#{options[:match_type]}_profile-name"],
        }
      },
    )
  end

  private_lane :ship do | options |
    pilot(
      ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa",
      skip_waiting_for_build_processing: true,
      verbose: false,
      uses_non_exempt_encryption: true,
      notify_external_testers: false,
      username: options[:apple_id],
      team_id: options[:apple_team_id],
      apple_id: options[:apple_app_id],
      itc_provider: ENV["sigh_#{options[:app_identifier]}_#{options[:match_type]}_team-id"],
    )
  end

  lane :buildAndShip do
    is_build_for_dev = BUILD_TYPE == "development"
    options = {
      :running_on_ci => ENV["CI"] || false,
      :build_only => true,
      :apple_id => ENV["APPLE_ID"],
      :apple_team_id => ENV["APPLE_TEAM_ID"],
      :apple_app_id =>  ENV["APPLE_APP_ID"],
      :app_identifier => ENV["APP_IDENTIFIER"],
      :match_type => is_build_for_dev ? "development" : "appstore",
      :configuration_name => is_build_for_dev ? "Development" : "Release",
      :export_options_method => is_build_for_dev ? "development" : "app-store",
      :branch_name => ENV["GITHUB.HEAD_REF"],
    }

    build(options)

    unless build_only
      ship(options)
    end

    commitAndPush(options)
  end
end
