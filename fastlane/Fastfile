# Global variables to simplify the individual adjustment
PROJECT_NAME = "MyAwesomeProject"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"
BUILD_FOR_DEVELOPMENT_ONLY = false # true = Build for Development | false = Build to create a release

opt_out_usage

platform :ios do
  before_all do
    ensure_git_status_clean
  end

  # Private lane with the following required `options`:
  #   - branch_name
  private_lane :commitAndPush do | options |
    commit_version_bump(
      xcodeproj: XCODE_PROJECT,
      include: ["ios/Podfile.lock"],
    )

    push_to_git_remote(
      local_branch: options[:branch_name],
    )
  end

  # Private lane with the following required `values`:
  #   ci         = true | false
  #   match_type = appstore | adhoc | development | enterprise
  private_lane :certificates do | values |
    ci = values[:ci]
    match_type = values[:match_type]

    if ci
      create_keychain(
        name: ENV["CI_KEYCHAIN_NAME"],
        password: ENV["CI_KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: match_type,
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    else
      match(
        type: match_type,
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    end

  end

  # Private lane with the following required `values`:
  #   ci         = true | false
  #   build_only = true | false
  private_lane :build_and_ship do | values |
    # Set variables depending on the requirements
    build_only = values[:build_only]
    ci = values[:ci]
    configuration_name = BUILD_FOR_DEVELOPMENT_ONLY ? "Development" : "Release"
    export_options_method = BUILD_FOR_DEVELOPMENT_ONLY ? "development" : "app-store"
    match_type = BUILD_FOR_DEVELOPMENT_ONLY ? "development" : "appstore"

    certificates(
      ci: ci,
      match_type: match_type,
    )

    # Install a required pod-files
    cocoapods(
      repo_update: true,
      podfile: "./ios/Podfile"
    )

    increment_build_number(
      xcodeproj: XCODE_PROJECT,
      build_number: 15,
    )

    # Build the project and store the results in the output folder
    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: configuration_name,
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_options: {
        method: export_options_method,
        provisioningProfiles: {
          ENV["APP_IDENTIFIER"] => ENV["sigh_#{ENV["APP_IDENTIFIER"]}_#{match_type}_profile-name"],
        }
      },
    )

    unless build_only
      pilot(
        ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa",
        skip_waiting_for_build_processing: true,
        verbose: false,
        uses_non_exempt_encryption: true,
        notify_external_testers: false,
        username: ENV["APPLE_ID"],
        team_id: ENV["APPLE_TEAM_ID"],
        apple_id: ENV["APPLE_APP_ID"],
        itc_provider: ENV["sigh_#{ENV["APP_IDENTIFIER"]}_#{match_type}_team-id"],
      )
    end

    commitAndPush
  end

  lane :buildAndShip do
    running_on_ci = ENV["CI"] || false
    # build_and_ship(
    #   ci: ENV["CI"] || false,
    #   build_only: true,
    # )

    branch_name = running_on_ci ? ENV["GITHUB.HEAD_REF"] : sh("git", "rev-parse", "--abbrev-ref", "HEAD")
    puts "************************"
    puts "#{branch_name}"
    puts "************************"

    # commitAndPush(
    #   branch_name: branch_name,
    # )
  end
end
