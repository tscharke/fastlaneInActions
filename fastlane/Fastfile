opt_out_usage

# Global variables to simplify the individual adjustment
PROJECT_NAME = "MyAwesomeProject"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"
BUILD_FOR_DEVELOPMENT_ONLY = false # true = Build for Development | false = Build to create a release
BUILD_ONLY = false

platform :ios do
  before_all do
    ensure_git_status_clean
  end

  private_lane :commitAndPush do | options |
    commit_version_bump(
      xcodeproj: XCODE_PROJECT,
      include: ["ios/Podfile.lock"],
    )

    if options[:running_on_ci]
      current_branch_name = options[:git_branch_name].split("/")[-1]
      current_branch = sh("git show-ref | grep #{current_branch_name} | awk '{print $2}'").split("\n")[-1]
      repository_uri = sh("git remote show origin | awk 'NR==2{print $3}' | sed 's/git@//g' | sed 's#https://##g'")

      puts "*************************************************"
      puts "current_branch_name = #{current_branch_name}"
      puts "current_branch      = #{current_branch}"
      puts "repository_uri      = #{repository_uri}"
      puts "*************************************************"

      sh("git", "remote", "set-url", "origin", "https://x-access-token:#{options[:token]}@github.com/tscharke/fastlaneInActions.git")

      push_to_git_remote(
        local_branch: current_branch_name,
        remote_branch: current_branch,
      )
    else
      push_to_git_remote
    end
  end

  private_lane :certificates do | options |
    match_type = options[:match_type]

    if options[:ci]
      create_keychain(
        name: ENV["CI_KEYCHAIN_NAME"],
        password: ENV["CI_KEYCHAIN_PASSWORD"],
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
      match(
        type: match_type,
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    else
      match(
        type: match_type,
        readonly: true,
        shallow_clone: true,
        verbose: false,
        clone_branch_directly: true,
      )
    end

  end

  private_lane :build do | options |
    build_for_development_only = options[:build_for_development_only]
    configuration_name = build_for_development_only ? "Development" : "Release"
    export_options_method = build_for_development_only ? "development" : "app-store"
    match_type = build_for_development_only ? "development" : "appstore"

    certificates(
      ci: options[:running_on_ci],
      match_type: match_type,
    )

    cocoapods(
      repo_update: true,
      podfile: "./ios/Podfile"
    )

    increment_build_number(
      xcodeproj: XCODE_PROJECT,
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      silent: true,
      clean: true,
      configuration: configuration_name,
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_options: {
        method: export_options_method,
        provisioningProfiles: {
          options[:app_identifier] => ENV["sigh_#{options[:app_identifier]}_#{match_type}_profile-name"],
        }
      },
    )

    match_type
  end

  private_lane :ship do | options |
    pilot(
      ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa",
      skip_waiting_for_build_processing: true,
      verbose: false,
      uses_non_exempt_encryption: true,
      notify_external_testers: false,
      username: options[:apple_id],
      team_id: options[:apple_team_id],
      apple_id: options[:apple_app_id],
      itc_provider: ENV["sigh_#{options[:app_identifier]}_#{options[:match_type]}_team-id"],
    )
  end

  private_lane :myTest do | options |
    increment_build_number(
      xcodeproj: XCODE_PROJECT,
      build_number: 21,
    )
    commitAndPush(options)
  end

  lane :buildAndShip do
    running_on_ci = ENV["CI"] || false
    options = {
      :build_for_development_only => BUILD_FOR_DEVELOPMENT_ONLY,
      :running_on_ci => running_on_ci,
      :git_branch_name => running_on_ci ? ENV['GIT_BRANCH_NAME'] : sh("git", "rev-parse", "--abbrev-ref", "HEAD"),
      :app_identifier => ENV["APP_IDENTIFIER"],
      :apple_id => ENV["APPLE_ID"],
      :apple_team_id => ENV["APPLE_TEAM_ID"],
      :apple_app_id => ENV["APPLE_APP_ID"],
      :token => ENV["GITHUB_TOKEN"],
    }

    myTest(options)

    # match_type = build(options)
    # unless BUILD_ONLY
    #   ship(
    #     apple_id: options[:apple_id],
    #     apple_team_id: options[:apple_team_id],
    #     apple_app_id: options[:apple_app_id],
    #     match_type: match_type,
    #   )
    # end
    # commitAndPush(options)
  end
end
